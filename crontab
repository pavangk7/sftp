
How to install/run Cron in a Docker Container
docker-cron-example.md
How to install/run Cron in a Docker Container
Example crontab entry for testing
Append a timestamp to the log file every minute /var/log/cron.
Append "tick" and "tock" in alternate minutes to /var/log/cron.
* * * * * /bin/date --rfc-3339=seconds >> /var/log/cron
*/2 * * * * /bin/echo 'tick' >> /var/log/cron
1-59/2 * * * * /bin/echo 'tock' >> /var/log/cron
Run a test Container
Standard docker method
$ docker rm -f crond &> /dev/null; \
 docker run -d \
 --name crond \
 --restart always \
 --env SSH_AUTOSTART_SSHD=false \
 --env SSH_AUTOSTART_SSHD_BOOTSTRAP=false \
 --env DOCKER_PORT_MAP_TCP_22=NULL \
 jdeathe/centos-ssh:2.2.0
Install cronie
Install the cronie package
$ docker exec -i crond \
 yum -y install cronie
The following might be necessary if using an Ubuntu type host.

$ docker exec -i crond \
 sed -i -e 's~^\(session.*pam_loginuid.so\)$~#\1~' /etc/pam.d/crond
Configure crond to run under supervisord
$ docker exec -i crond \
 tee /etc/supervisord.d/crond.conf 1> /dev/null <<-CONFIG
[program:crond]
priority = 100
command = bash -c "while true; do sleep 0.1; [[ -e /var/run/crond.pid ]] || break; done && exec /usr/sbin/crond -m off -n"
startsecs = 0
autorestart = true
redirect_stderr = true
stdout_logfile = /var/log/cron
stdout_events_enabled = true
CONFIG
Add some cron jobs
Option 1 - Add to the root users crontab.
$ docker exec -i crond bash -c "cat <<-CONFIG | crontab -
* * * * * /bin/date --rfc-3339=seconds >> /var/log/cron
0-58/2 * * * * /bin/echo 'tick' >> /var/log/cron
1-59/2 * * * * /bin/echo 'tock' >> /var/log/cron
CONFIG"
Option 2 - Add jobs to /etc/cron.d/
System job so rules must specify the user at position 6.

$ docker exec -i crond tee /etc/cron.d/cron-examples 1> /dev/null <<-CONFIG
* * * * * root /bin/date --rfc-3339=seconds >> /var/log/cron
0-58/2 * * * * root /bin/echo 'tick' >> /var/log/cron
1-59/2 * * * * root /bin/echo 'tock' >> /var/log/cron
CONFIG
Restart container
Restarting the container allows supervisord start the process. If you Upload a new configuration you will not need to restart for the changes to apply.

$ docker restart crond
Check it works
Tail the logs - Note: Use Ctl + c to exit.

$ docker exec -i crond tail -f /var/log/cron
Apline Linux (Busybox) version
If you only want to run the crond daemon the busybox or alpine linux images are smaller.

$ docker rm -f crond &> /dev/null; \
 docker run -d \
 --name crond \
 --restart always \
 alpine:3.5 \
 /usr/sbin/crond -f
Add some cron jobs
In this example the cron commands replace the contents of the log instead of appending to them.

$ docker exec -i crond \
sh -c "cat <<-CONFIG | crontab -
* * * * * /bin/date -Iseconds > /var/log/cron-minutes
0-58/2 * * * * /bin/echo 'tick' > /var/log/cron-alternator
1-59/2 * * * * /bin/echo 'tock' > /var/log/cron-alternator
CONFIG"
Check it works
After at least 1 minute, check that it's working.

Watch the file /var/log/cron-minutes every 1 second for it to be updated once a minute with the date time string.

$ docker exec -i crond \
 watch -n 1 cat /var/log/cron-minutes
Watch the file /var/log/cron-minutes every 1 second. It's value should alternate between "tick" and "tock" for even and odd minutes respectively.

$ docker exec -i crond \
 watch -n 1 cat /var/log/cron-alternator
@zx1986
zx1986 commented on Jan 15, 2018
the crond must be PID = 0, right?

@jdeathe
Author
jdeathe commented on Mar 28, 2018 • 
@zx1986 not in this case; for the jdeathe/centos-ssh image supervisor is running as the process manager.

@rammaram06
rammaram06 commented on Aug 31, 2018
@jdeathe Is it possible to run cronjob as non-root user in centos image?

@jdeathe
Author
jdeathe commented on Sep 9, 2018
@rammaram06 You can with su.

@prokopvv
prokopvv commented on Jun 12, 2020
@jdeathe I test exemple with centos:7 image.
If use https://gist.github.com/jdeathe/94d7b1681187a3a97c5cd4a7eee244f1#option-2---add-jobs-to-etccrond need chek permisioton on cron file.
For me work only after chmod 0644 -R /etc/cron.d/



Issues & Solutions
On Alpine Linux (and other linux distributions probably) the crond process must be running as the root privilege, it’s too harmful for security concerns, for further, the containerized processes didn’t have the root privileges on the docker commonly.
The related bug was filed as #381, on Alpine Linux the ‘crond’ daemon service would schedule the jobs for users, it was implemented in the busybox code base, as you can see the crond would call the function ‘change_identity’ implemented by the syscall setgroups (the linux capability CAP_SETGID required commonly), to switch the job privilege into the normal user / group privilege, same as the job of the user, so crond process must be running as root.
As an alternative we can set the capability bit CAP_SETGID on crond by using setcap, but on alpine linux crond is a symbolic link of busybox, and setcap failed with the link, so we should set CAP_SETGID on busybox like the dockerfile instructions below:
# install cap package and set the capabilities on busybox
RUN apk add --update --no-cache libcap && \
    setcap cap_setgid=ep /bin/busybox
in this workaround we set the CAP_SETGID bit on busybox slightly, but be aware of that busybox is implemented as the unix like utilities in a single file, it contains a lot of utility features, e.g. chown, adduser, etc. obviously such features (inside busybox) also have the capabilites to run successfully, so we could make the broader attack surface by accident.
As the code solution I coded the fix that allowed you to run crond as the normal user privilege, and it can schedule the jobs of the same user only, In fact the fix didn’t call the privileged function change_identity, in case of the equivalent effective user ID with the cron job owner, and let go through to spawn the cron job, it’s very helpful in case of least permissions, on docker especially, I would discuss the code fix with the alpine comminity soon. currently I pushed the patched alpine docker with the fix onto the public site:
geekidea/alpine-cron:3.7
geekidea/alpine-cron:3.8
geekidea/alpine-cron:3.9
geekidea/alpine-cron:3.10 
a demo dockerfile to run cron(d) and jobs as nobody:
FROM geekidea/alpine-cron:3.10
# run as nobody
USER nobody
RUN mkdir /tmp/crontabs \
    && echo 'SHELL=/bin/sh' > /tmp/crontabs/nobody \
    && echo '* * * * * /tmp/nobody.sh' >> /tmp/crontabs/nobody \
    && echo 'echo "$(date) blahblahblah nobody" >> /tmp/nb-cron.log' > /tmp/nobody.sh \
    && chmod 0755 /tmp/nobody.sh
# run crond service as foreground mode
CMD ["crond", "-c", "/tmp/crontabs", "-l", "0", "-d", "0", "-f"] 
Notes
1.In case running crond as the non-root user with a login shell, assuming the user dba info in /etc/passwd:
dba:x:1000:1000:Linux User,,,:/home/dba:/bin/ash
the crontab file could be located in the default system crontab file path:
/var/spool/cron/crontabs/dba
2.In addition, the crontab file name must be identical with the file owner, and the associated uid must be identical with the effective uid.
3.The owner id of the crontab file must be identical with the effective uid, also for root.
4.In case running crond as the non-root user without a login shell, assuming the user nobody info in /etc/passwd:
nobody:x:65534:65534:nobody:/:/sbin/nologin
You must set the env variable SHELL (e.g. SHELL=/bin/sh) in the crontab file.
5.In the Kubernetes aspect another kind of workload ‘CronJob’ is to be scheduled periodically, also you can define mutiple job replicas as the distributed tasks.
Examples
1.run crond as root as usual, schedule jobs for users ‘dba’ and ‘nobody’
# echo "* * * * * mysql -e 'show processlist' >> /var/log/db.log" >> /var/spool/cron/crontabs/dba
# echo "* * * * * /tmp/nobody.sh" >> /var/spool/cron/crontabs/nobody
# crond
2.run crond as non-root, schedule jobs for user ‘dba’
$ mkdir -p /home/dba/crontabs
$ echo "* * * * * mysql -e 'show processlist' >> /var/log/db.log" >> /home/dba/crontabs/dba
$ crond -c /home/dba/crontabs
3.run crond as non-root, schedule jobs for user ‘nobody’
$ mkdir /tmp/crontabs
$ cat > /tmp/crontabs/nobody << EOF
> SHELL=/bin/sh
> * * * * * /tmp/nobody.sh
> EOF
$ crond -c /tmp/crontabs 
